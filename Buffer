import java.io.IOException;
import java.io.RandomAccessFile;
import java.util.Arrays;

/**
 * @author pallucha21 and evanhowe03
 * @version 1.0
 */
public class Buffer {

    // an integer representing the index of the block
    // this record array is associated with
    private int buff;

    // array of records
    private Record[] data;
    private RandomAccessFile disk;
    private final static int BLOCK_SIZE = 4096 / 4;
    // private final static int RECORD_SIZE = 4;
    private long position; // postiton in the file
    private boolean isDirty;
    private int currentIndex;
    private int blockInFile;

    /**
     * construction
     * 
     * @param bufferSize
     *            this is the size
     */
    public Buffer(RandomAccessFile disk) {

        data = new Record[BLOCK_SIZE];
        this.disk = disk;
        // this.buff = block;
        this.isDirty = false;
        this.currentIndex = 0;
        this.blockInFile = -1;
        // this.position = block % BLOCK_SIZE; // postion in file
        // this.position = block * 4096;

    }


    public Record getRec(int index) {
        return data[index];
    }


    /**
     * read lock
     * 
     * @return data
     */
    public Record[] readBlock() {

        return data;
    }


    /**
     * if the last spot is full return that record
     * if the the spot was empty return null;
     * 
     * @param rec
     * @return
     */
    public boolean add(Record rec, int block) {

        if (data[data.length - 1] != null) {
            return false;
        }

        for (int i = 0; i < data.length; i++) {
            if (data[i] == null) {
                data[i] = rec;
                currentIndex++;
                setBlock(block);
                return true;
            }
        }
        return false;
    }


    public byte[] getKeyArray(int index) {
        return data[index].getKeyArray();
    }


    public byte[] getValueArray(int index) {
        return data[index].getKeyArray();
    }


    public short getKey(int index) {
        // System.out.println("FISHIE" + index);
        return data[index].getKey();
    }


    public void setBlock(int block) {

        blockInFile = block;
    }


    public int getBlock() {
        return blockInFile;
    }


    public short getValue(int index) {
        return data[index].getValue();
    }


    public void write(Record[] newData) {
        // Sets new data to the buffer and marks the buffer as dirty,
        // indicating that the buffer contents have been modified.
        data = newData;
        isDirty = true;

    }


    public void writeBack() throws IOException {
        /**
         * If the buffer is dirty (i.e., its data was modified),
         * it writes the buffer's data back to the disk at the appropriate
         * position.
         * This method also increments a counter named diskWrites in a separate
         * Stat class.
         */

        // System.out.println("TTTTTTTT");
        // write back and increment
        disk.seek(position); // should be current pos
        for (int x = 0; x < data.length; x++) {
            if (data[x] != null) {
                byte[] recordBytes = data[x].toByteArray();
                disk.write(recordBytes);
            }
            data[x] = null;
        }
        isDirty = false;

    }


    public long block() {
        /**
         * Returns the block index associated with this buffer.
         */
        return position;
    }


    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();

        // Include buffer info
        sb.append("Buffer Position: ").append(position).append("\n");
        sb.append("Is Dirty: ").append(isDirty).append("\n");

        // Summarize the records in the buffer
        sb.append("Records:\n");
        for (int i = 0; i < data.length; i++) {
            if (data[i] != null) {
                sb.append("Index ").append(i).append(": ");
                sb.append(data[i].toString()).append("\n");
            }
            else {
                sb.append("Index ").append(i).append(": Empty\n");
            }
        }

        return sb.toString();
    }


    public int getCurrentIndex() {
        return currentIndex;
    }


    public Record[] getData() {

        return data;
    }

}
