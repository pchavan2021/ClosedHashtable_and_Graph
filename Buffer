import java.io.IOException;
import java.io.RandomAccessFile;
import java.util.Arrays;

/**
 * @author pallucha21 and evanhowe03
 * @version 1.0
 */
public class Buffer {

    // an integer representing the index of the block
    // this record array is associated with
    private int buff;

    // array of records
    private byte[] data;
    private RandomAccessFile disk;
    private final static int BLOCK_SIZE = 4096;

    // private final static int RECORD_SIZE = 4;
    private long position; // postiton in the file
    private boolean isDirty;
    private int currentIndex;
    private int blockInFile;

    /**
     * construction
     * 
     * @param bufferSize
     *            this is the size
     */
    public Buffer(RandomAccessFile disk) {

        data = new byte[BLOCK_SIZE];
        this.disk = disk;
        // this.buff = block;
        this.isDirty = false;
        this.currentIndex = 0;
        this.blockInFile = -1;
        // this.position = block % BLOCK_SIZE; // postion in file
        // this.position = block * 4096;

    }


    public byte[] getRec(int index) {
        byte[] result = new byte[4];
        System.arraycopy(data, index, result, 0, 4);
        return result;
    }


    public short getKey(byte[] bytes) {
        return (short)((bytes[0] << 8) | (bytes[1] & 0xFF));
    }


    /**
     * read lock
     * 
     * @return data
     */
    public byte[] getBuffer() {
        return data;
    }


    public void add(byte[] rec, int block) {
        System.arraycopy(rec, 0, data, 0, 4096);
        // currentIndex++;
        setBlock(block);
      //  System.out.println(blockInFile);
        // isDirty = true; // probabaly delete

    }


    public short getKey(int pos) {
        byte[] key = new byte[2];
        System.arraycopy(data, pos, key, 0, 2);
        return toShort(key);

    }


    private static short toShort(byte[] bytes) {
        return (short)((bytes[0] << 8) | (bytes[1] & 0xFF));
    }


    public void setBlock(int block) {

        blockInFile = block;
    }


    public int getBlock() {
        return blockInFile;
    }




    public void writeBack() throws IOException {
        /**
         * 
         * If the buffer is dirty (i.e., its data was modified),
         * it writes the buffer's data back to the disk at the appropriate
         * position.
         * This method also increments a counter named diskWrites in a separate
         * Stat class.
         */
        // System.out.println("GERE" + isDirty);
        if (!isDirty) {

            Arrays.fill(data, (byte)0);
            return;
        }

        // System.out.println("TTTTTTTT");
        // write back and increment
        disk.seek(blockInFile * 4096); // should be current pos
        disk.write(data);

        // hopefully this isn't problematic
        Arrays.fill(data, (byte)0);
        isDirty = false;

    }


    public void setDirty(boolean add) {
        isDirty = add;
    }


    public void setRecord(int pos, byte[] rec) {
        System.arraycopy(rec, 0, data, pos, 4);
        // isDirty = true;

    }


    public String toString() {
        return "Buffer Information:\n" + "Block: " + blockInFile
            + "\n" + "Is Dirty: " + isDirty + "\n" + "Data: " + Arrays
                .toString(data);
    }
}
