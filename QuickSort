
/**
 * {Project Description Here}
 */

import java.io.IOException;
import java.io.RandomAccessFile;
import java.util.Arrays;
import java.util.Random;

/**
 * The class containing the main method.
 *
 * @author {Your Name Here}
 * @version {Put Something Here}
 */

// On my honor:
//
// - I have not used source code obtained from another student,
// or any other unauthorized source, either modified or
// unmodified.
//
// - All source code and documentation used in my program is
// either my original work, or was derived by me from the
// source code published in the textbook for this course.
//
// - I have not discussed coding details about this project with
// anyone other than my partner (in the case of a joint
// submission), instructor, ACM/UPE tutors or the TAs assigned
// to this course. I understand that I may discuss the concepts
// of this program with other students, and that another student
// may help me debug my program so long as neither of us writes
// anything during the discussion or modifies any computer file
// during the discussion. I have violated neither the spirit nor
// letter of this restriction.

public class Quicksort {
    private static BufferPool buffPool;

    /**
     * This method is used to generate a file of a certain size, containing a
     * specified number of records.
     *
     * @param filename
     *            the name of the file to create/write to
     * @param blockSize
     *            the size of the file to generate
     * @param format
     *            the format of file to create
     * @throws IOException
     *             throw if the file is not open and proper
     */
    public static void generateFile(
        String filename,
        String blockSize,
        char format)
        throws IOException {
        FileGenerator generator = new FileGenerator();
        String[] inputs = new String[3];
        inputs[0] = "-" + format;
        inputs[1] = filename;
        inputs[2] = blockSize;
        generator.generateFile(inputs);
    }


    /**
     * @param args
     *            Command line parameters.
     * @throws IOException
     */
    public static void main(String[] args) throws IOException {

        String fileName = args[0];
        int totalBufferPoolLength = Integer.parseInt(args[1]);
        String outputStats = args[2];

        try {
            Quicksort.generateFile(fileName, "4096", 'a');

            Random rdn = new Random();
            RandomAccessFile raf = new RandomAccessFile(fileName, "rw");

            int fileLength = (int)raf.length();
            byte[] byteArray = new byte[fileLength];

            for (int i = 0; i < byteArray.length; i++) {
                int fileEnd = raf.read(byteArray, i, 1);

            }
            //bubblesort(byteArray);
            quickSort(byteArray, 0, byteArray.length - 4);

            for (int i = 0; i < byteArray.length; i++) {
                System.out.println("byteArray[" + i + "] = " + byteArray[i]);
            }

        }
        catch (

        Exception e) {

            e.printStackTrace();
        }

    }


    static void bubblesort(byte[] A) {
        int count = 0;
        for (int i = 0; i < A.length - 4; i = i + 4) {
            // Insert i'th record
            for (int j = 0; j < A.length - 4 - i; j = j + 4) {
                
                if (getKey(A, j) > getKey(A, j + 4)) {
                    System.out.println(count++);
                    swap(A, j, j + 4);
                }
            }
        }

 
    }


    /**
     * i is index 0, j is the index of the starting position of the
     * last record
     * 
     * @param A
     * @param i
     * @param j
     */
    static void quickSort(byte[] A, int i, int j) { // Quicksort
        System.out.println("called");
        // pivotIndex is the starting position of the middle record
        int pivotindex = findpivot(A, i, j); // Pick a pivot

        swap(A, pivotindex, j); // Stick pivot at end

        // k will be the first position in the right subarray
        // j is now the pivot since we swapped
        int k = partition(A, i, j - 4, j);

        swap(A, k, j); // Put pivot in place
        if ((k - i) >= 4) {
            quickSort(A, i, k - 4);
        } // Sort left partition
        if ((j - k) >= 4) {
            quickSort(A, k + 4, j);
        } // Sort right partition
    }


    /**
     * returns the index of the pivot
     * based off of the original byte array
     * 
     * @param A
     * @param i
     * @param j
     * @return
     */
    static int findpivot(byte[] A, int i, int j) {
        //return ((i + j) / 2) & ~0x03; // Ensure it is a multiple of 4

         int first = (i + j) / 4;
         int second = (first + 1) / 2;
         int third = (second * 4);
         return third;
        
    }


    private static void swap(byte[] array, int i, int j) {
        byte[] temp = Arrays.copyOfRange(array, i, i + 4);

        for (int x = 0; x < 4; x++) {
            array[i + x] = array[j + x];
            array[j + x] = temp[x];
        }

    }


    public static short getKey(byte[] byteArray, int index) {

        // Extract the two bytes
        byte byte1 = byteArray[index];
        byte byte2 = byteArray[index + 1];

        // Combine them to form a short
        return (short)((byte1 << 8) | (byte2 & 0xFF));
    }


    static int partition(byte[] A, int left, int right, int piv) {
        short pivot = getKey(A, piv);
        System.out.println("this is the pivot " + pivot);
        // 
        while (left <= right) { // Move bounds

            // 
            while (getKey(A, left) < pivot) {
                System.out.println("this is the left " + left);
                System.out.println("this is the left value " + getKey(A, left));
                System.out.println("this is right " + right);
                left += 4;
            }
            // 
            while ((right >= left) && (getKey(A, right) >= pivot)) {
                System.out.println("this is the left " + left);
                System.out.println("this is the rihgt value " + getKey(A, right));
                System.out.println("this is right " + right);
                right -= 4;
            }
            //getKey(A, right) > getKey(A, left)
            if (right > left) {
                System.out.println("this is the left " + left);
                System.out.println("this is the left value " + getKey(A, left));
                System.out.println("this is the rihgt value " + getKey(A, right));
                System.out.println("this is right " + right);
                swap(A, left, right);
                //left += 4;
                //right -= 4;
            } // Swap out-of-place values
        }
        return left; // Return first position in right partition
    }

}
