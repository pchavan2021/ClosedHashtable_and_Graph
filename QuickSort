
/**
 * {Project Description Here}
 */

import java.io.IOException;
import java.io.RandomAccessFile;
import java.util.Random;

/**
 * The class containing the main method.
 *
 * @author {Your Name Here}
 * @version {Put Something Here}
 */

// On my honor:
//
// - I have not used source code obtained from another student,
// or any other unauthorized source, either modified or
// unmodified.
//
// - All source code and documentation used in my program is
// either my original work, or was derived by me from the
// source code published in the textbook for this course.
//
// - I have not discussed coding details about this project with
// anyone other than my partner (in the case of a joint
// submission), instructor, ACM/UPE tutors or the TAs assigned
// to this course. I understand that I may discuss the concepts
// of this program with other students, and that another student
// may help me debug my program so long as neither of us writes
// anything during the discussion or modifies any computer file
// during the discussion. I have violated neither the spirit nor
// letter of this restriction.

public class Quicksort {
    private static BufferPool buffPool;

    /**
     * This method is used to generate a file of a certain size, containing a
     * specified number of records.
     *
     * @param filename
     *            the name of the file to create/write to
     * @param blockSize
     *            the size of the file to generate
     * @param format
     *            the format of file to create
     * @throws IOException
     *             throw if the file is not open and proper
     */
    public static void generateFile(
        String filename,
        String blockSize,
        char format)
        throws IOException {
        FileGenerator generator = new FileGenerator();
        String[] inputs = new String[3];
        inputs[0] = "-" + format;
        inputs[1] = filename;
        inputs[2] = blockSize;
        generator.generateFile(inputs);
    }


    /**
     * @param args
     *            Command line parameters.
     * @throws IOException
     */
    public static void main(String[] args) throws IOException {
        byte[] byteArray = new byte[4096];
        short[] shortArray = new short[1024];
        String fileName = args[0];
        int totalBufferPoolLength = Integer.parseInt(args[1]);
        String outputStats = args[2];

        try {
            Quicksort.generateFile(fileName, "4096", 'a');
            buffPool = new BufferPool(totalBufferPoolLength);
            Random rdn = new Random();
            RandomAccessFile raf = new RandomAccessFile(fileName, "rw");

            for (int i = 0; i < byteArray.length; i += 2) {
                int fileEnd = raf.read(byteArray, i, 2);

            }

        }
        catch (

        Exception e) {

            e.printStackTrace();
        }
        int index = 0;
        for (int i = 0; i < byteArray.length; i += 4) {
            short firstShort = (short)((byteArray[i] << 8) | (byteArray[i + 1]
                & 0xFF));
            short secondShort = (short)((byteArray[i + 2] << 8) | (byteArray[i
                + 3] & 0xFF));
            String combine = (Short.toString(firstShort) + Short.toString(
                secondShort));
            shortArray[index] = Short.parseShort(combine);
            index++;

        }
        for (int i = 0; i < shortArray.length; i++) {
            System.out.println("intArray[" + i + "] = " + byteArray[i]);
        }

    }


    public static void quicksort(Comparable[] A, int i, int j) { // Quicksort
        int pivotindex = findpivot(A, i, j); // Pick a pivot
        swap(A, pivotindex, j); // Stick pivot at end
        // k will be the first position in the right subarray
        int k = partition(A, i, j - 1, A[j]);
        swap(A, k, j); // Put pivot in place
        if ((k - i) > 1) {
            quicksort(A, i, k - 1);
        } // Sort left partition
        if ((j - k) > 1) {
            quicksort(A, k + 1, j);
        } // Sort right partition
    }


    static int findpivot(Comparable[] A, int i, int j) {
        return (i + j) / 2;
    }


    static int partition(
        Comparable[] A,
        int left,
        int right,
        Comparable pivot) {
        while (left <= right) { // Move bounds inward until they meet
            while (A[left].compareTo(pivot) < 0) {
                left++;
            }
            while ((right >= left) && (A[right].compareTo(pivot) >= 0)) {
                right--;
            }
            if (right > left) {
                swap(A, left, right);
            } // Swap out-of-place values
        }
        return left; // Return first position in right partition
    }
    
    private static void swap(Comparable[] A, int i, int j) {
        Comparable temp = A[i];
        A[i] = A[j];
        A[j] = temp;
    }
}
