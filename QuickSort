
/**
 * {Project Description Here}
 */

import java.io.IOException;
import java.io.RandomAccessFile;
import java.util.Arrays;
import java.util.Random;

/**
 * The class containing the main method.
 *
 * @author {Your Name Here}
 * @version {Put Something Here}
 */

// On my honor:
//
// - I have not used source code obtained from another student,
// or any other unauthorized source, either modified or
// unmodified.
//
// - All source code and documentation used in my program is
// either my original work, or was derived by me from the
// source code published in the textbook for this course.
//
// - I have not discussed coding details about this project with
// anyone other than my partner (in the case of a joint
// submission), instructor, ACM/UPE tutors or the TAs assigned
// to this course. I understand that I may discuss the concepts
// of this program with other students, and that another student
// may help me debug my program so long as neither of us writes
// anything during the discussion or modifies any computer file
// during the discussion. I have violated neither the spirit nor
// letter of this restriction.

public class Quicksort {
    private static BufferPool buffPool;

    /**
     * This method is used to generate a file of a certain size, containing a
     * specified number of records.
     *
     * @param filename
     *            the name of the file to create/write to
     * @param blockSize
     *            the size of the file to generate
     * @param format
     *            the format of file to create
     * @throws IOException
     *             throw if the file is not open and proper
     */
    public static void generateFile(
        String filename,
        String blockSize,
        char format)
        throws IOException {
        FileGenerator generator = new FileGenerator();
        String[] inputs = new String[3];
        inputs[0] = "-" + format;
        inputs[1] = filename;
        inputs[2] = blockSize;
        generator.generateFile(inputs);
    }


    /**
     * @param args
     *            Command line parameters.
     * @throws IOException
     */
    public static void main(String[] args) throws IOException {

        String fileName = args[0];
        int totalBufferPoolLength = Integer.parseInt(args[1]);
        String outputStats = args[2];

        try {
            Quicksort.generateFile(fileName, "4096", 'a');

            Random rdn = new Random();
            RandomAccessFile raf = new RandomAccessFile(fileName,
                "rw");

            int fileLength = (int)raf.length();
            byte[] byteArray = new byte[fileLength];

            for (int i = 0; i < byteArray.length; i++) {
                int fileEnd = raf.read(byteArray, i, 1);

            }
            quicksort(byteArray, 0, byteArray.length - 5);
            /**
            for (int i = 0; i < byteArray.length; i++) {
                System.out.println("byteArray[" + i + "] = "
                    + byteArray[i]);
            }
            **/
        }
        catch (

        Exception e) {

            e.printStackTrace();
        }

    }
    
    static byte[] getEntire(byte[] A, int start) {
        
        return Arrays.copyOfRange(A, start, start + 4);
    }
    
    public byte[] getKey(byte[] A, int start) {
        return Arrays.copyOfRange(A, start, start + 2);
    }

    public static void quicksort(byte[] A, int i, int j) { // Quicksort
        int pivotindex = findpivot(A, i, j); // Pick a pivot
        swap(A, pivotindex, j); // Stick pivot at end
        // k will be the first position in the right subarray
        int k = partition(A, i, j - 4, pivotindex);
        swap(A, k, j); // Put pivot in place
        if ((k - 4) > 4) {
            quicksort(A, i, k - 4);
        } // Sort left partition
        if ((j - k) > 4) {
            quicksort(A, k + 4, j);
        } // Sort right partition
    }

    //returns the pivot value, so the record in the middle
    //of the array
    static int findpivot(byte[] A, int i, int j) {
 
        return ((i + j) / 2);
    }

    
    public static short bytesToShort(byte[] byteArray, int index) {
        // Extract the two bytes
        byte byte1 = byteArray[index];
        byte byte2 = byteArray[index + 1];

        // Combine them to form a short
        return (short) ((byte1 << 8) | (byte2 & 0xFF));
    }

    //pass in the starting positions of the left and write values
    static int partition(
        byte[] A,
        int leftIndex,
        int rightIndex,
        int piv) {
        
        short pivot = bytesToShort(A, piv);
        //get the right and left keys
        short left = bytesToShort(A, leftIndex);
        short right = bytesToShort(A, rightIndex);
        
        while (leftIndex <= rightIndex) { // Move bounds inward until they meet
            while (left < pivot) {
                leftIndex = leftIndex + 4;
            }
            while ((rightIndex >= leftIndex) && (right >= 
                pivot)) {
                rightIndex = rightIndex - 4;
           
            }
            if (rightIndex > leftIndex) {
                swap(A, leftIndex, rightIndex);
            } // Swap out-of-place values
        }
        return leftIndex; // Return first position in right partition
    }


    private static void swap(byte[] A, int i, int j) {
        
        
        byte[] temp = getEntire(A, i);

        System.arraycopy(A, j, A, i, 4);
        System.arraycopy(temp, 0, A, j, 4);
        
        
    }
}
