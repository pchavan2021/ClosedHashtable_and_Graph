import java.io.File;
import java.io.IOException;

/**
 * this is the sorter class
 * 
 * The class containing the main method.
 *
 * @author pallucha21 and evanhowe03
 * @version 1.0
 */
public class Sorter {

    private BufferPool pool;
    private int diskSize;
    private int numBuffer;
    private final static int BLOCK_SIZE = 4096;
    private final static int RECORD_SIZE = 4;

    /**
     * this is the constructor
     * 
     * @param records
     *            list
     * @throws IOException
     */
    public Sorter(String name, int numBuffer) throws IOException {

        File file = new File(name);
        pool = new BufferPool(file, numBuffer);
        this.numBuffer = numBuffer;

        long fileSize = file.length(); // size of the file in bytes

        diskSize = ((int)(fileSize));
        // System.out.println(diskSize);

    }


    public int getSize() {
        return diskSize;
    }


    public void sort() throws IOException {
        quicksortHelp(0, this.getSize() - RECORD_SIZE);
    }


    /**
     * this is the quicksort
     * 
     * @param A
     *            array
     * @param i
     *            starting pos
     * @param j
     *            ending pos
     * @throws IOException
     */
    private void quicksortHelp(int i, int j) throws IOException {

        int pivot = findPivot(i, j);
       // System.out.println("this is the pivot " + pivot);
        // will put the pivot and j buffer arrays in the pool
        swap(pivot, j);

        int k = partition(i, j - RECORD_SIZE, j);

        // will put the k buffer arrar in the pool, pool already has j
        swap(k, j);

        if ((k - i) > RECORD_SIZE) {

            quicksortHelp(i, k - RECORD_SIZE);

        }

        if ((j - k) > RECORD_SIZE) {
            quicksortHelp(k + RECORD_SIZE, j);
        }

    }


    private int findPivot(int i, int j) {

        return i + (int)((j - i) / RECORD_SIZE / 2) * RECORD_SIZE;
    }


    private int partition(int left, int right, int pivotIndex)
        throws IOException {

        // Record pivot = toSort[pivotIndex];

        while (left <= right) {

            while (left <= right && pool.getKey(left) < pool.getKey(
                pivotIndex)) {
                // left++;
                left += RECORD_SIZE;
            }
            while (left <= right && pool.getKey(right) >= pool.getKey(
                pivotIndex)) {
                // right--;
                right -= RECORD_SIZE;
            }
            if (left < right) {
                swap(left, right);
                // left++;
                // right--;
                left += RECORD_SIZE;
                right -= RECORD_SIZE;
            }
        }

        return left;
    }


    public void swap(int index1, int index2) throws IOException {

        // System.out.println("index1: " + index1 + "index2: " + index2);
        byte[] lRec = pool.getRec(index1);
        byte[] rRec = pool.getRec(index2);

        pool.setRec(index2, lRec);
        // may not be setting right its using the same buffer but bytes could be
        // in different ones
        pool.setRec(index1, rRec);
        
    }


    public void flush() throws IOException {
       pool.printplz();
       pool.flush();
    }

}
