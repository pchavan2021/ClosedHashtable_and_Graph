import java.io.File;
import java.io.IOException;
import java.io.RandomAccessFile;

/**
 * @author pallucha21 and evanhowe03
 * @version 1.0
 */
public class BufferPool {

    private RandomAccessFile disk;
    private Buffer[][] pool;
    private int totalBlocksInFile;
    private final static int BLOCK_SIZE = 4096;
    private final static int RECORD_SIZE = 4;
    private int posFile;

    /**
     * this is the constructor
     * 
     * @param fileName
     *            this is a file
     * @param numBuffers
     *            this a numbuffers
     */
    public BufferPool(File file, int numBuffer) throws IOException {
        
        posFile = 0;

        disk = new RandomAccessFile(file, "rw");

        totalBlocksInFile = (int)disk.length() / (BLOCK_SIZE/4);

        pool = new Buffer[numBuffer][BLOCK_SIZE/RECORD_SIZE];
    }


    /**
     * insert a buffer into the buffer pool
     * 
     * @param buffer
     *            this is the buffer
     * @throws IOException
     */
    public void insert(Record rec) throws IOException {

        // insert the record into the pool
        // if the pool is at it's capacity
        // use the LRU to writeBack to the file
        Buffer result = add(rec);
        if (result != null) {
            result.writeBack();
            insert(rec);
        }
    }


    /**
     * adds the record to the next
     * open spot
     * 
     * @param rec
     * @return whether the pool
     *         is full or not
     */
    public Buffer add(Record rec) {
        
        for (int i = 0; i < pool.length; i++) {
            Record fill = pool[i][0].add(rec);
            if (fill == null) {
          
                return null;
            }
            
        }  
        
        int size  = (BLOCK_SIZE/RECORD_SIZE) - 1;
        return pool[pool.length - 1][size];
        
    }
    
    
    public Record getBuffer(int block) throws IOException {
        
        //get a buffer for a specific block from the pool.
        //boolean found = pool.search(block);
        
        //if (!found) {
            // read from disk and enqueue to pool
            byte[] blockData = new byte[4];
            disk.seek(posFile);
            disk.read(blockData);
            
            //make recrod to insert
            Record addRec = new Record();
            System.arraycopy(blockData, 0, addRec.getKey(), 0, 2);
            System.arraycopy(blockData, 2, addRec.getValue(), 0, 2);
            
            this.insert(addRec);
            
            return addRec;
       // }
        //if the block is found, return the most recently used buffer
        //which is likely the rear
    }
    
    public short getKey(int row, int col) {
        //return the key for the specific record at the
        //given directions
        return pool[row][col].getKey(col);
        
    }
    
    public short getValue(int row, int col) {
        return pool[row][col].getValue(col);
    }
    
    public void flush() 
        throws IOException {
        //remove all the buffers from the pool
        //write them back into the file
        for (int i = 0; i < pool.length; i++) {
            pool[i][0].writeBack();
        }
    }
    
    public int numBlocks() {
        return this.totalBlocksInFile;
    }
 
    



}
