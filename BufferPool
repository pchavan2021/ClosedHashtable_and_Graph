import java.io.File;
import java.io.IOException;
import java.io.RandomAccessFile;

/**
 * @author pallucha21 and evanhowe03
 * @version 1.0
 */
public class BufferPool {

    private RandomAccessFile disk;
    private Buffer[] pool;
    private int totalBlocksInFile;
    private final static int BLOCK_SIZE = 4096;
    private final static int RECORD_SIZE = 4;
    private int numberOfBuffers;
    private int posFile;

    /**
     * this is the constructor
     * 
     * @param fileName
     *            this is a file
     * @param numBuffers
     *            this a numbuffers
     */
    public BufferPool(File file, int numBuffer) throws IOException {

        posFile = 0;

        numberOfBuffers = numBuffer;

        disk = new RandomAccessFile(file, "rw");

        totalBlocksInFile = (int)disk.length() / (BLOCK_SIZE / 4);

        pool = new Buffer[numBuffer];

        for (int i = 0; i < numBuffer; i++) {

            pool[i] = new Buffer(disk);

        }

    }


    /**
     * insert a buffer into the buffer pool
     * 
     * @param buffer
     *            this is the buffer
     * @throws IOException
     */
    /*
     * public void insert(Record rec, int block) throws IOException {
     * // insert the record into the pool
     * // if the pool is at its capacity
     * // use the LRU to writeBack to the file
     * if (!add(rec, block)) {
     * 
     * Buffer lastBuffer = pool[pool.length - 1];
     * // System.out.println(lastBuffer.toString());
     * lastBuffer.writeBack();
     * insert(rec, block);
     * // System.out.println("AFTER");
     * // System.out.println(lastBuffer.toString());
     * }
     * }
     * 
     */

    public byte[] getRec(int index) throws IOException {
        int block = index / BLOCK_SIZE;
        int pos = index % BLOCK_SIZE;

        for (int i = 0; i < numberOfBuffers; i++) {
            // System.out.println("I: " + i + "" + " BLCOKS: " + pool[i]
            // .getBlock() + " BUFFERARRAY: " + bufferArray
            // + " INDEX: " + index);

            if (pool[i].getBlock() == block) {

                // System.out.println("Equal Block");
                // move to front of buffer
                if (i != 0) {
                    // shift instead of swapping
                    Buffer temp = pool[0];
                    pool[0] = pool[i];
                    pool[i] = temp;
                }
                return pool[0].getRec(pos);
            }

        }
        // System.out.println("Equal Block");
        leastRecent();
        // System.out.println("LEAST");
        int readIndex = block * 4096;
        byte[] blockData = new byte[BLOCK_SIZE];

        disk.seek(readIndex);
        disk.readFully(blockData);

        pool[0].add(blockData, block);

        return pool[0].getRec(pos);

    }


    public void leastRecent() throws IOException {
        pool[numberOfBuffers - 1].writeBack();

        for (int x = numberOfBuffers - 2; x >= 0; x--) {
            pool[x + 1] = pool[x];
        }
//
// byte[] empty = new byte[BLOCK_SIZE];
// pool[0].add(empty, -1);

    }


    public short getKey(int index) {

        int block = index / BLOCK_SIZE;
        int pos = index % BLOCK_SIZE;

        for (int i = 0; i < numberOfBuffers; i++) {
            if (block == pool[i].getBlock()) {
                // pool[i].toString();
                return pool[i].getKey(pos);
            }
        }
        return 0;

    }


    public void printplz() {
        for (int x = 0; x < numberOfBuffers; x++) {
            System.out.println("buffer: " + numberOfBuffers
                + " value: " + pool[x].toString());
        }
    }


    public void flush() throws IOException {
        // remove all the buffers from the pool
        // write them back into the file
        for (int i = 0; i < pool.length; i++) {
            pool[i].writeBack();

        }
    }


    public int numBlocks() {
        return this.totalBlocksInFile;
    }


    @Override
    public String toString() {
        String fish = "test";
        for (int x = 0; x < pool.length; x++) {
            fish += "Pool buffer index" + x + "";
            fish += pool[x].toString();
        }
        return fish;

    }


    public void setRec(int index, byte[] record) throws IOException {

        int block = index / BLOCK_SIZE;
        int pos = index % BLOCK_SIZE;

        for (int i = 0; i < numberOfBuffers; i++) {

            if (pool[i].getBlock() == block) {
                pool[i].setRecord(pos, record);
                pool[i].setDirty(true);

            }

        }

    }

}
