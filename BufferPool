import java.io.File;
import java.io.IOException;
import java.io.RandomAccessFile;

/**
 * @author pallucha21 and evanhowe03
 * @version 1.0
 */
public class BufferPool {

    private RandomAccessFile disk;
    private Buffer[] pool;
    private int totalBlocksInFile;
    private final static int BLOCK_SIZE = 4096;
    private final static int RECORD_SIZE = 4;
    private int numberOfBuffers;
    private int posFile;

    /**
     * this is the constructor
     * 
     * @param fileName
     *            this is a file
     * @param numBuffers
     *            this a numbuffers
     */
    public BufferPool(File file, int numBuffer) throws IOException {

        posFile = 0;

        numberOfBuffers = numBuffer;

        disk = new RandomAccessFile(file, "rw");

        totalBlocksInFile = (int)disk.length() / (BLOCK_SIZE / 4);

        pool = new Buffer[numBuffer];

        for (int i = 0; i < numBuffer; i++) {

            pool[i] = new Buffer(disk);

        }

    }


    /**
     * insert a buffer into the buffer pool
     * 
     * @param buffer
     *            this is the buffer
     * @throws IOException
     */
    public void insert(Record rec, int block) throws IOException {
        // insert the record into the pool
        // if the pool is at its capacity
        // use the LRU to writeBack to the file
        if (!add(rec, block)) {

            Buffer lastBuffer = pool[pool.length - 1];
            // System.out.println(lastBuffer.toString());
            lastBuffer.writeBack();
            insert(rec, block);
            // System.out.println("AFTER");
            // System.out.println(lastBuffer.toString());
        }
    }


    /**
     * adds the record to the next
     * open spot
     * 
     * @param rec
     * @return whether the pool
     *         is full or not
     */
    public boolean add(Record rec, int block) {
        for (int i = 0; i < pool.length; i++) {
            if (pool[i].add(rec, block)) {
                return true;
            }
        }
        return false;
    }


    public Record getRec(int index) throws IOException {
        // System.out.println("index " + index);
        int bufferArray = index / 4096;
        int pos = index % 1024;
        // System.out.println("bufferArray " + bufferArray);
        // System.out.println("pos " + pos);

        // get a buffer for a specific block from the pool.
        // boolean found = pool.search(block);
        for (int i = 0; i < numberOfBuffers; i++) {
            System.out.println("I: " + i + "" + " BLCOKS: " + pool[i]
                .getBlock() + " BUFFERARRAY: " + bufferArray
                + " INDEX: " + index);
            if (pool[i].getBlock() == bufferArray) {
                System.out.println("Equal Block");
                // move to front of buffer
                return pool[i].getRec(pos);
            }

        }

        // pool.leastRecent();

        int readIndex = bufferArray * 4096;
        byte[] blockData = new byte[BLOCK_SIZE];
        disk.seek(readIndex);
        disk.readFully(blockData);

        for (int y = 0; y < 4096; y += 4) {
            Record record = new Record();
            byte[] keyArray = new byte[2];
            byte[] valueArray = new byte[2];
            System.arraycopy(blockData, y, record.getKeyArray(), 0,
                2);
            System.arraycopy(blockData, y + 2, record.getValueArray(),
                0, 2);

        }

        /*
         * int readIndex = bufferArray * 4096;
         * System.out.println("Full");
         * 
         * for (int i = 0; i < 1024; i++) {
         * 
         * byte[] blockData = new byte[4];
         * disk.seek(readIndex);
         * disk.read(blockData);
         * 
         * Record addRec = new Record();
         * System.arraycopy(blockData, 0, addRec.getKeyArray(), 0,
         * 2);
         * System.arraycopy(blockData, 2, addRec.getValueArray(), 0,
         * 2);
         * 
         * readIndex = readIndex + 4;
         * insert(addRec, bufferArray);
         * }
         */

        return pool[0].getRec(index % 1024);
        // }
        // if the block is found, return the most recently used buffer
        // which is likely the rear
    }


    public short getKey(int index) {

        // return the key for the specific record at the
        // given directions
        // System.out.println(index);

        int block = index / 1024;
        int position = index % 1024;

        for (int i = 0; i < numberOfBuffers; i++) {
            if (block == pool[i].getBlock()) {
                return pool[i].getKey(position);
            }
        }
        return 0;

    }


    public void flush() throws IOException {
        // remove all the buffers from the pool
        // write them back into the file
        for (int i = 0; i < pool.length; i++) {
            pool[i].writeBack();

        }
    }


    public int numBlocks() {
        return this.totalBlocksInFile;
    }


    public byte[] getKeyArray(int index) {
        int block = index / BLOCK_SIZE;
        int position = index % BLOCK_SIZE;

        return pool[block].getKeyArray(position);

    }


    public byte[] getValueArray(int index) {
        int block = index / BLOCK_SIZE;
        int position = index % BLOCK_SIZE;

        return pool[block].getKeyArray(position);
    }


    @Override
    public String toString() {
        String fish = "test";
        for (int x = 0; x < pool.length; x++) {
            fish += "Pool buffer index" + x + "";
            fish += pool[x].toString();
        }
        return fish;

    }

}
