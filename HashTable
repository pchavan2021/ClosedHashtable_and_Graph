/**
 * @author Pallavi Chavan pallucha21 and Evan Howe evanhowe03
 * @param <K>
 *            this is the key
 * @param <V>
 *            this is the value
 * @version 09/14/23
 */
public class HashTable {
    private int hashSize; // hash
    private int size; // size
    private Node[] table; // tab;e

    private boolean song;

    /**
     * HashTbale constructor
     * @param initialHashSize intial hashSize
     * @param which boolean 
     */
    public HashTable(int initialHashSize, boolean which) {

        song = which;
        hashSize = initialHashSize;
        size = 0;
        table = new Node[hashSize];
     

    }


    /**
     * return the size of the hash table.l
     */
    public int getHashSize() {
        return hashSize;
    }


    /**
     * this doubles the hashtable by creating an empt y hashtable that's double
     * the
     * initial size and rehashing all of the old val ues of the old table into
     * the
     * new one
     */
    private void doubleTable() {
        Node[] oldTable = table;
        int oldSize = hashSize;

        hashSize *= 2;
        table = new Node[hashSize];

        for (int i = 0; i < oldSize; i++) {
            if (oldTable[i] != null && !oldTable[i].isDeleted()) {
                String key = oldTable[i].getKey();
                GraphNode value = oldTable[i].getValue();

                int hash = Hash.h((String)key, hashSize);
                int j = 0;

                while (j < hashSize) {
                    int probe = (hash + j * j) % hashSize;
                    if (table[probe] == null) {
                        table[probe] = new Node(key, value);
                        break;
                    }
                    j++;
                }

            }
        }
    }


    /**
     * 
     * @param key this is the key
     * @param value this is the value
     * @param fish this is the boolean
     * @return whether insertion was
     * succesful
     * @throws Exception
     */
    public boolean insert(String key, GraphNode value, boolean fish)
        throws Exception {
        // Check if resizing is needed
        if (size >= (hashSize / 2)) {
            doubleTable();
            if (song) {
                System.out.println("Song hash table size doubled.");
            }
            else {
                System.out.println("Artist hash table size doubled.");
            }
        }

        // Hash the key to get the initial index
        int hash = Hash.h((String)key, hashSize);
        int i = 0;

        while (i < hashSize) {
            int probe = (hash + i * i) % hashSize;
            Node entry = table[probe];
            

            // If the spot is empty or marked for deletion, insert the new node
            if (entry == null || entry.isDeleted()) {
                table[probe] = new Node(key, value);
                size++;
                if (song) {
                    System.out.println("|" + key + "|"
                        + " is added to the Song database.");
                    table[probe].setTomb(false);
                }
                else {
                    System.out.println("|" + key + "|"
                        + " is added to the Artist database.");
                    table[probe].setTomb(false);
                }
                return true;
            }
            else if (entry.getKey().equals(key) && !entry.isDeleted()) {
               
                if (song) {
                    System.out.println("im here");
                    System.out.println("|" + value + "<SEP>" + key
                        + "| duplicates a record already in the Song database.");
                }
                 
                return false;
            }

            
            i++;
        }

        throw new Exception("HashTable is full");
    }


    /**
     * don't add duplicates
     */
    /**
     * Deletes a seminar from the hashtable
     * 
     * @param key
     *            this the key value
     * @return whether the deletion was successful or not
     */
    public boolean delete(String key) {
        // Calculate the initial hash value
        int hash = Hash.h((String) key, hashSize);
        int i = 0;

        // Use quadratic probing to find the key
        while (i < hashSize) {
            int probe = (hash + i * i) % hashSize;
            Node entry = table[probe];

            // Check if the current spot is null (key not found)
            if (entry == null) {
                break; // Key not found, break the loop
            }

            // Check if the current entry matches the key and is not marked as deleted
            if (!entry.isDeleted() && entry.getKey().equals(key)) {
                entry.setTomb(true); // Mark as deleted
                size--; // Decrement the size

                // Print the appropriate message based on the 'song' flag
                if (song) {
                    System.out.println("|" + key + "| is removed from the Song database.");
                } else {
                    System.out.println("|" + key + "| is removed from the Artist database.");
                }
                return true; // Deletion successful
            }

            i++; // Increment i for the next quadratic probe
        }

        // Print the appropriate message based on the 'song' flag if key is not found
        if (song) {
            System.out.println("|" + key + "| does not exist in the Song database.");
        } else {
            System.out.println("|" + key + "| does not exist in the Artist database.");
        }
        return false; // Key not found, deletion unsuccessful
    }
    
    /**
     * 
     * @param key thuis ishte key
     * @return the index
     */
    public int findIndex(String key) {
        int hash = Hash.h((String)key, hashSize); // Initial hash computation
        int i = 0;

        while (i < hashSize) {
            int probe = (hash + i * i) % hashSize; // Quadratic probing
            Node entry = table[probe];

            if (entry == null) {
                return -1; // Key not found
            } else if (!entry.isDeleted() && entry.getKey().equals(key)) {
                return probe; // Key found
            }
            i++;
        }
        return -1; // Key not found after full probing
    }

    /**
     * 
     * @param printmythingy
     *            take in the string "hashtable" or "blocks"
     * @return whether it was requested to print blocks or hashtable
     */
    public int print() {

        for (int x = 0; x < hashSize; x++) {
            if (table[x] != null) {
                if (table[x].isDeleted()) {
                    System.out.println("" + x + ": TOMBSTONE");
                }
                else {
                    System.out.println("" + x + ": |" + table[x].getKey()
                        + "|");
                }
            }

        }

        return size;

    }
}
